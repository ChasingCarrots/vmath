#include <array>
#include <stdexcept>

#define BOOST_TEST_DYN_LINK
#include <boost/test/unit_test.hpp>
#include <boost/test/test_case_template.hpp>

#include <vmath/core/matrix.hpp>

#include "../type_lists.hpp"

BOOST_AUTO_TEST_SUITE(matrix4x4)

BOOST_AUTO_TEST_CASE_TEMPLATE(size, T, float_types) {
	BOOST_CHECK(sizeof(vmath::core::matrix<T, 4>) == 4 * 4 * sizeof(T));
}

BOOST_AUTO_TEST_CASE_TEMPLATE(create, T, float_types) {
	// default constructor
	vmath::core::matrix<T, 4> M_default;
	BOOST_CHECK_SMALL(M_default[0][0], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[0][1], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[0][2], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[0][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[1][0], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[1][1], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[1][2], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[1][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[2][0], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[2][1], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[2][2], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[2][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[3][0], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[3][1], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[3][2], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M_default[3][3], static_cast<T>(1e-7));
	// parameterized constructor
	std::array<vmath::core::vector<T, 4>, 4> data = {{
			vmath::core::vector<T, 4>(static_cast<T>(1.0), static_cast<T>(2.0), static_cast<T>(3.0), static_cast<T>(4.0)),
			vmath::core::vector<T, 4>(static_cast<T>(5.0), static_cast<T>(6.0), static_cast<T>(7.0), static_cast<T>(8.0)),
			vmath::core::vector<T, 4>(static_cast<T>(9.0), static_cast<T>(10.0), static_cast<T>(11.0), static_cast<T>(12.0)),
			vmath::core::vector<T, 4>(static_cast<T>(13.0), static_cast<T>(14.0), static_cast<T>(15.0), static_cast<T>(16.0))
		}};
	vmath::core::matrix<T, 4> M_param(data);
	BOOST_CHECK_CLOSE(M_param[0][0], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[0][1], static_cast<T>(2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[0][2], static_cast<T>(3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[0][3], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[1][0], static_cast<T>(5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[1][1], static_cast<T>(6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[1][2], static_cast<T>(7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[1][3], static_cast<T>(8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[2][0], static_cast<T>(9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[2][1], static_cast<T>(10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[2][2], static_cast<T>(11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[2][3], static_cast<T>(12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[3][0], static_cast<T>(13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[3][1], static_cast<T>(14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[3][2], static_cast<T>(15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param[3][3], static_cast<T>(16.0), 1e-4f);
	// parameterized constructor
	vmath::core::vector<T, 4> col1(static_cast<T>(1.0), static_cast<T>(2.0), static_cast<T>(3.0), static_cast<T>(4.0));
	vmath::core::vector<T, 4> col2(static_cast<T>(5.0), static_cast<T>(6.0), static_cast<T>(7.0), static_cast<T>(8.0));
	vmath::core::vector<T, 4> col3(static_cast<T>(9.0), static_cast<T>(10.0), static_cast<T>(11.0), static_cast<T>(12.0));
	vmath::core::vector<T, 4> col4(static_cast<T>(13.0), static_cast<T>(14.0), static_cast<T>(15.0), static_cast<T>(16.0));
	vmath::core::matrix<T, 4> M_param2(col1, col2, col3, col4);
	BOOST_CHECK_CLOSE(M_param2[0][0], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[0][1], static_cast<T>(2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[0][2], static_cast<T>(3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[0][3], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[1][0], static_cast<T>(5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[1][1], static_cast<T>(6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[1][2], static_cast<T>(7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[1][3], static_cast<T>(8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[2][0], static_cast<T>(9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[2][1], static_cast<T>(10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[2][2], static_cast<T>(11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[2][3], static_cast<T>(12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[3][0], static_cast<T>(13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[3][1], static_cast<T>(14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[3][2], static_cast<T>(15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_param2[3][3], static_cast<T>(16.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(copy, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(5.0);
	M[1][1] = static_cast<T>(6.0);
	M[1][2] = static_cast<T>(7.0);
	M[1][3] = static_cast<T>(8.0);
	M[2][0] = static_cast<T>(9.0);
	M[2][1] = static_cast<T>(10.0);
	M[2][2] = static_cast<T>(11.0);
	M[2][3] = static_cast<T>(12.0);
	M[3][0] = static_cast<T>(13.0);
	M[3][1] = static_cast<T>(14.0);
	M[3][2] = static_cast<T>(15.0);
	M[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4> M_copy(M);
	BOOST_CHECK_CLOSE(M_copy[0][0], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[0][1], static_cast<T>(2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[0][2], static_cast<T>(3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[0][3], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[1][0], static_cast<T>(5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[1][1], static_cast<T>(6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[1][2], static_cast<T>(7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[1][3], static_cast<T>(8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[2][0], static_cast<T>(9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[2][1], static_cast<T>(10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[2][2], static_cast<T>(11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[2][3], static_cast<T>(12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[3][0], static_cast<T>(13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[3][1], static_cast<T>(14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[3][2], static_cast<T>(15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_copy[3][3], static_cast<T>(16.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(move, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(5.0);
	M[1][1] = static_cast<T>(6.0);
	M[1][2] = static_cast<T>(7.0);
	M[1][3] = static_cast<T>(8.0);
	M[2][0] = static_cast<T>(9.0);
	M[2][1] = static_cast<T>(10.0);
	M[2][2] = static_cast<T>(11.0);
	M[2][3] = static_cast<T>(12.0);
	M[3][0] = static_cast<T>(13.0);
	M[3][1] = static_cast<T>(14.0);
	M[3][2] = static_cast<T>(15.0);
	M[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4> M_move(std::move(M));
	BOOST_CHECK_CLOSE(M_move[0][0], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[0][1], static_cast<T>(2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[0][2], static_cast<T>(3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[0][3], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[1][0], static_cast<T>(5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[1][1], static_cast<T>(6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[1][2], static_cast<T>(7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[1][3], static_cast<T>(8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[2][0], static_cast<T>(9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[2][1], static_cast<T>(10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[2][2], static_cast<T>(11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[2][3], static_cast<T>(12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[3][0], static_cast<T>(13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[3][1], static_cast<T>(14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[3][2], static_cast<T>(15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_move[3][3], static_cast<T>(16.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(members, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0] = vmath::core::vector<T, 4>(static_cast<T>(1.0), static_cast<T>(2.0), static_cast<T>(3.0), static_cast<T>(4.0));
	M[1] = vmath::core::vector<T, 4>(static_cast<T>(5.0), static_cast<T>(6.0), static_cast<T>(7.0), static_cast<T>(8.0));
	M[2] = vmath::core::vector<T, 4>(static_cast<T>(9.0), static_cast<T>(10.0), static_cast<T>(11.0), static_cast<T>(12.0));
	M[3] = vmath::core::vector<T, 4>(static_cast<T>(13.0), static_cast<T>(14.0), static_cast<T>(15.0), static_cast<T>(16.0));
	BOOST_CHECK_CLOSE(M[0][0], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[0][1], static_cast<T>(2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[0][2], static_cast<T>(3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[0][3], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[1][0], static_cast<T>(5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[1][1], static_cast<T>(6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[1][2], static_cast<T>(7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[1][3], static_cast<T>(8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[2][0], static_cast<T>(9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[2][1], static_cast<T>(10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[2][2], static_cast<T>(11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[2][3], static_cast<T>(12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[3][0], static_cast<T>(13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[3][1], static_cast<T>(14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[3][2], static_cast<T>(15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[3][3], static_cast<T>(16.0), 1e-4f);
	// invalid index
	BOOST_CHECK_THROW(M[4], std::out_of_range);
	BOOST_CHECK_THROW((M[4] = vmath::core::vector<T, 4>()), std::out_of_range);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(assign, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(5.0);
	M[1][1] = static_cast<T>(6.0);
	M[1][2] = static_cast<T>(7.0);
	M[1][3] = static_cast<T>(8.0);
	M[2][0] = static_cast<T>(9.0);
	M[2][1] = static_cast<T>(10.0);
	M[2][2] = static_cast<T>(11.0);
	M[2][3] = static_cast<T>(12.0);
	M[3][0] = static_cast<T>(13.0);
	M[3][1] = static_cast<T>(14.0);
	M[3][2] = static_cast<T>(15.0);
	M[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4> M_assign;
	M_assign = M;
	BOOST_CHECK_CLOSE(M_assign[0][0], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[0][1], static_cast<T>(2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[0][2], static_cast<T>(3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[0][3], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[1][0], static_cast<T>(5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[1][1], static_cast<T>(6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[1][2], static_cast<T>(7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[1][3], static_cast<T>(8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[2][0], static_cast<T>(9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[2][1], static_cast<T>(10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[2][2], static_cast<T>(11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[2][3], static_cast<T>(12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[3][0], static_cast<T>(13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[3][1], static_cast<T>(14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[3][2], static_cast<T>(15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_assign[3][3], static_cast<T>(16.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(negate, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(5.0);
	M[1][1] = static_cast<T>(6.0);
	M[1][2] = static_cast<T>(7.0);
	M[1][3] = static_cast<T>(8.0);
	M[2][0] = static_cast<T>(9.0);
	M[2][1] = static_cast<T>(10.0);
	M[2][2] = static_cast<T>(11.0);
	M[2][3] = static_cast<T>(12.0);
	M[3][0] = static_cast<T>(13.0);
	M[3][1] = static_cast<T>(14.0);
	M[3][2] = static_cast<T>(15.0);
	M[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4> M_neg;
	M_neg = -M;
	BOOST_CHECK_CLOSE(M_neg[0][0], static_cast<T>(-1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[0][1], static_cast<T>(-2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[0][2], static_cast<T>(-3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[0][3], static_cast<T>(-4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[1][0], static_cast<T>(-5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[1][1], static_cast<T>(-6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[1][2], static_cast<T>(-7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[1][3], static_cast<T>(-8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[2][0], static_cast<T>(-9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[2][1], static_cast<T>(-10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[2][2], static_cast<T>(-11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[2][3], static_cast<T>(-12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[3][0], static_cast<T>(-13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[3][1], static_cast<T>(-14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[3][2], static_cast<T>(-15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_neg[3][3], static_cast<T>(-16.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(matrix_add, T, float_types) {
	vmath::core::matrix<T, 4> M1;
	M1[0][0] = static_cast<T>(1.0);
	M1[0][1] = static_cast<T>(2.0);
	M1[0][2] = static_cast<T>(3.0);
	M1[0][3] = static_cast<T>(4.0);
	M1[1][0] = static_cast<T>(5.0);
	M1[1][1] = static_cast<T>(6.0);
	M1[1][2] = static_cast<T>(7.0);
	M1[1][3] = static_cast<T>(8.0);
	M1[2][0] = static_cast<T>(9.0);
	M1[2][1] = static_cast<T>(10.0);
	M1[2][2] = static_cast<T>(11.0);
	M1[2][3] = static_cast<T>(12.0);
	M1[3][0] = static_cast<T>(13.0);
	M1[3][1] = static_cast<T>(14.0);
	M1[3][2] = static_cast<T>(15.0);
	M1[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4> M2;
	M2[0][0] = static_cast<T>(16.0);
	M2[0][1] = static_cast<T>(15.0);
	M2[0][2] = static_cast<T>(14.0);
	M2[0][3] = static_cast<T>(13.0);
	M2[1][0] = static_cast<T>(12.0);
	M2[1][1] = static_cast<T>(11.0);
	M2[1][2] = static_cast<T>(10.0);
	M2[1][3] = static_cast<T>(9.0);
	M2[2][0] = static_cast<T>(8.0);
	M2[2][1] = static_cast<T>(7.0);
	M2[2][2] = static_cast<T>(6.0);
	M2[2][3] = static_cast<T>(5.0);
	M2[3][0] = static_cast<T>(4.0);
	M2[3][1] = static_cast<T>(3.0);
	M2[3][2] = static_cast<T>(2.0);
	M2[3][3] = static_cast<T>(1.0);
	vmath::core::matrix<T, 4> M_add;
	M_add = M1 + M2;
	BOOST_CHECK_CLOSE(M_add[0][0], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[0][1], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[0][2], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[0][3], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[1][0], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[1][1], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[1][2], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[1][3], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[2][0], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[2][1], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[2][2], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[2][3], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[3][0], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[3][1], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[3][2], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[3][3], static_cast<T>(17.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(matrix_add_eq, T, float_types) {
	vmath::core::matrix<T, 4> M1;
	M1[0][0] = static_cast<T>(1.0);
	M1[0][1] = static_cast<T>(2.0);
	M1[0][2] = static_cast<T>(3.0);
	M1[0][3] = static_cast<T>(4.0);
	M1[1][0] = static_cast<T>(5.0);
	M1[1][1] = static_cast<T>(6.0);
	M1[1][2] = static_cast<T>(7.0);
	M1[1][3] = static_cast<T>(8.0);
	M1[2][0] = static_cast<T>(9.0);
	M1[2][1] = static_cast<T>(10.0);
	M1[2][2] = static_cast<T>(11.0);
	M1[2][3] = static_cast<T>(12.0);
	M1[3][0] = static_cast<T>(13.0);
	M1[3][1] = static_cast<T>(14.0);
	M1[3][2] = static_cast<T>(15.0);
	M1[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4> M2;
	M2[0][0] = static_cast<T>(16.0);
	M2[0][1] = static_cast<T>(15.0);
	M2[0][2] = static_cast<T>(14.0);
	M2[0][3] = static_cast<T>(13.0);
	M2[1][0] = static_cast<T>(12.0);
	M2[1][1] = static_cast<T>(11.0);
	M2[1][2] = static_cast<T>(10.0);
	M2[1][3] = static_cast<T>(9.0);
	M2[2][0] = static_cast<T>(8.0);
	M2[2][1] = static_cast<T>(7.0);
	M2[2][2] = static_cast<T>(6.0);
	M2[2][3] = static_cast<T>(5.0);
	M2[3][0] = static_cast<T>(4.0);
	M2[3][1] = static_cast<T>(3.0);
	M2[3][2] = static_cast<T>(2.0);
	M2[3][3] = static_cast<T>(1.0);
	vmath::core::matrix<T, 4> M_add = M1;
	M_add += M2;
	BOOST_CHECK_CLOSE(M_add[0][0], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[0][1], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[0][2], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[0][3], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[1][0], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[1][1], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[1][2], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[1][3], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[2][0], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[2][1], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[2][2], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[2][3], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[3][0], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[3][1], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[3][2], static_cast<T>(17.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_add[3][3], static_cast<T>(17.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(matrix_sub, T, float_types) {
	vmath::core::matrix<T, 4> M1;
	M1[0][0] = static_cast<T>(1.0);
	M1[0][1] = static_cast<T>(2.0);
	M1[0][2] = static_cast<T>(3.0);
	M1[0][3] = static_cast<T>(4.0);
	M1[1][0] = static_cast<T>(5.0);
	M1[1][1] = static_cast<T>(6.0);
	M1[1][2] = static_cast<T>(7.0);
	M1[1][3] = static_cast<T>(8.0);
	M1[2][0] = static_cast<T>(9.0);
	M1[2][1] = static_cast<T>(10.0);
	M1[2][2] = static_cast<T>(11.0);
	M1[2][3] = static_cast<T>(12.0);
	M1[3][0] = static_cast<T>(13.0);
	M1[3][1] = static_cast<T>(14.0);
	M1[3][2] = static_cast<T>(15.0);
	M1[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4> M2;
	M2[0][0] = static_cast<T>(16.0);
	M2[0][1] = static_cast<T>(15.0);
	M2[0][2] = static_cast<T>(14.0);
	M2[0][3] = static_cast<T>(13.0);
	M2[1][0] = static_cast<T>(12.0);
	M2[1][1] = static_cast<T>(11.0);
	M2[1][2] = static_cast<T>(10.0);
	M2[1][3] = static_cast<T>(9.0);
	M2[2][0] = static_cast<T>(8.0);
	M2[2][1] = static_cast<T>(7.0);
	M2[2][2] = static_cast<T>(6.0);
	M2[2][3] = static_cast<T>(5.0);
	M2[3][0] = static_cast<T>(4.0);
	M2[3][1] = static_cast<T>(3.0);
	M2[3][2] = static_cast<T>(2.0);
	M2[3][3] = static_cast<T>(1.0);
	vmath::core::matrix<T, 4> M_sub;
	M_sub = M1 - M2;
	BOOST_CHECK_CLOSE(M_sub[0][0], static_cast<T>(-15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[0][1], static_cast<T>(-13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[0][2], static_cast<T>(-11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[0][3], static_cast<T>(-9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[1][0], static_cast<T>(-7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[1][1], static_cast<T>(-5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[1][2], static_cast<T>(-3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[1][3], static_cast<T>(-1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[2][0], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[2][1], static_cast<T>(3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[2][2], static_cast<T>(5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[2][3], static_cast<T>(7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[3][0], static_cast<T>(9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[3][1], static_cast<T>(11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[3][2], static_cast<T>(13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[3][3], static_cast<T>(15.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(matrix_sub_eq, T, float_types) {
	vmath::core::matrix<T, 4> M1;
	M1[0][0] = static_cast<T>(1.0);
	M1[0][1] = static_cast<T>(2.0);
	M1[0][2] = static_cast<T>(3.0);
	M1[0][3] = static_cast<T>(4.0);
	M1[1][0] = static_cast<T>(5.0);
	M1[1][1] = static_cast<T>(6.0);
	M1[1][2] = static_cast<T>(7.0);
	M1[1][3] = static_cast<T>(8.0);
	M1[2][0] = static_cast<T>(9.0);
	M1[2][1] = static_cast<T>(10.0);
	M1[2][2] = static_cast<T>(11.0);
	M1[2][3] = static_cast<T>(12.0);
	M1[3][0] = static_cast<T>(13.0);
	M1[3][1] = static_cast<T>(14.0);
	M1[3][2] = static_cast<T>(15.0);
	M1[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4> M2;
	M2[0][0] = static_cast<T>(16.0);
	M2[0][1] = static_cast<T>(15.0);
	M2[0][2] = static_cast<T>(14.0);
	M2[0][3] = static_cast<T>(13.0);
	M2[1][0] = static_cast<T>(12.0);
	M2[1][1] = static_cast<T>(11.0);
	M2[1][2] = static_cast<T>(10.0);
	M2[1][3] = static_cast<T>(9.0);
	M2[2][0] = static_cast<T>(8.0);
	M2[2][1] = static_cast<T>(7.0);
	M2[2][2] = static_cast<T>(6.0);
	M2[2][3] = static_cast<T>(5.0);
	M2[3][0] = static_cast<T>(4.0);
	M2[3][1] = static_cast<T>(3.0);
	M2[3][2] = static_cast<T>(2.0);
	M2[3][3] = static_cast<T>(1.0);
	vmath::core::matrix<T, 4> M_sub = M1;
	M_sub -= M2;
	BOOST_CHECK_CLOSE(M_sub[0][0], static_cast<T>(-15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[0][1], static_cast<T>(-13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[0][2], static_cast<T>(-11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[0][3], static_cast<T>(-9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[1][0], static_cast<T>(-7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[1][1], static_cast<T>(-5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[1][2], static_cast<T>(-3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[1][3], static_cast<T>(-1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[2][0], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[2][1], static_cast<T>(3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[2][2], static_cast<T>(5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[2][3], static_cast<T>(7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[3][0], static_cast<T>(9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[3][1], static_cast<T>(11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[3][2], static_cast<T>(13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sub[3][3], static_cast<T>(15.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(matrix_mult, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(5.0);
	M[1][1] = static_cast<T>(6.0);
	M[1][2] = static_cast<T>(7.0);
	M[1][3] = static_cast<T>(8.0);
	M[2][0] = static_cast<T>(9.0);
	M[2][1] = static_cast<T>(10.0);
	M[2][2] = static_cast<T>(11.0);
	M[2][3] = static_cast<T>(12.0);
	M[3][0] = static_cast<T>(13.0);
	M[3][1] = static_cast<T>(14.0);
	M[3][2] = static_cast<T>(15.0);
	M[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4, 2> M_4x2;
	M_4x2[0][0] = static_cast<T>(1.0);
	M_4x2[0][1] = static_cast<T>(2.0);
	M_4x2[0][2] = static_cast<T>(3.0);
	M_4x2[0][3] = static_cast<T>(4.0);
	M_4x2[1][0] = static_cast<T>(5.0);
	M_4x2[1][1] = static_cast<T>(6.0);
	M_4x2[1][2] = static_cast<T>(7.0);
	M_4x2[1][3] = static_cast<T>(8.0);
	vmath::core::matrix<T, 4, 3> M_4x3;
	M_4x3[0][0] = static_cast<T>(1.0);
	M_4x3[0][1] = static_cast<T>(2.0);
	M_4x3[0][2] = static_cast<T>(3.0);
	M_4x3[0][3] = static_cast<T>(4.0);
	M_4x3[1][0] = static_cast<T>(5.0);
	M_4x3[1][1] = static_cast<T>(6.0);
	M_4x3[1][2] = static_cast<T>(7.0);
	M_4x3[1][3] = static_cast<T>(8.0);
	M_4x3[2][0] = static_cast<T>(9.0);
	M_4x3[2][1] = static_cast<T>(10.0);
	M_4x3[2][2] = static_cast<T>(11.0);
	M_4x3[2][3] = static_cast<T>(12.0);
	vmath::core::matrix<T, 4> M_4x4;
	M_4x4[0][0] = static_cast<T>(1.0);
	M_4x4[0][1] = static_cast<T>(2.0);
	M_4x4[0][2] = static_cast<T>(3.0);
	M_4x4[0][3] = static_cast<T>(4.0);
	M_4x4[1][0] = static_cast<T>(5.0);
	M_4x4[1][1] = static_cast<T>(6.0);
	M_4x4[1][2] = static_cast<T>(7.0);
	M_4x4[1][3] = static_cast<T>(8.0);
	M_4x4[2][0] = static_cast<T>(9.0);
	M_4x4[2][1] = static_cast<T>(10.0);
	M_4x4[2][2] = static_cast<T>(11.0);
	M_4x4[2][3] = static_cast<T>(12.0);
	M_4x4[3][0] = static_cast<T>(13.0);
	M_4x4[3][1] = static_cast<T>(14.0);
	M_4x4[3][2] = static_cast<T>(15.0);
	M_4x4[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4, 2> M_sum4x2;
	M_sum4x2 = M * M_4x2;
	BOOST_CHECK_CLOSE(M_sum4x2[0][0], static_cast<T>(90.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x2[0][1], static_cast<T>(100.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x2[0][2], static_cast<T>(110.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x2[0][3], static_cast<T>(120.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x2[1][0], static_cast<T>(202.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x2[1][1], static_cast<T>(228.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x2[1][2], static_cast<T>(254.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x2[1][3], static_cast<T>(280.0), 1e-4f);
	vmath::core::matrix<T, 4, 3> M_sum4x3;
	M_sum4x3 = M * M_4x3;
	BOOST_CHECK_CLOSE(M_sum4x3[0][0], static_cast<T>(90.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x3[0][1], static_cast<T>(100.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x3[0][2], static_cast<T>(110.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x3[0][3], static_cast<T>(120.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x3[1][0], static_cast<T>(202.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x3[1][1], static_cast<T>(228.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x3[1][2], static_cast<T>(254.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x3[1][3], static_cast<T>(280.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x3[2][0], static_cast<T>(314.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x3[2][1], static_cast<T>(356.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x3[2][2], static_cast<T>(398.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x3[2][3], static_cast<T>(440.0), 1e-4f);
	vmath::core::matrix<T, 4> M_sum4x4;
	M_sum4x4 = M * M_4x4;
	BOOST_CHECK_CLOSE(M_sum4x4[0][0], static_cast<T>(90.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[0][1], static_cast<T>(100.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[0][2], static_cast<T>(110.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[0][3], static_cast<T>(120.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[1][0], static_cast<T>(202.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[1][1], static_cast<T>(228.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[1][2], static_cast<T>(254.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[1][3], static_cast<T>(280.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[2][0], static_cast<T>(314.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[2][1], static_cast<T>(356.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[2][2], static_cast<T>(398.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[2][3], static_cast<T>(440.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[3][0], static_cast<T>(426.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[3][1], static_cast<T>(484.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[3][2], static_cast<T>(542.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_sum4x4[3][3], static_cast<T>(600.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(scalar_mult, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(5.0);
	M[1][1] = static_cast<T>(6.0);
	M[1][2] = static_cast<T>(7.0);
	M[1][3] = static_cast<T>(8.0);
	M[2][0] = static_cast<T>(9.0);
	M[2][1] = static_cast<T>(10.0);
	M[2][2] = static_cast<T>(11.0);
	M[2][3] = static_cast<T>(12.0);
	M[3][0] = static_cast<T>(13.0);
	M[3][1] = static_cast<T>(14.0);
	M[3][2] = static_cast<T>(15.0);
	M[3][3] = static_cast<T>(16.0);
	T s = static_cast<T>(2.0);
	vmath::core::matrix<T, 4> M_mult;
	M_mult = M * s;
	BOOST_CHECK_CLOSE(M_mult[0][0], static_cast<T>(2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[0][1], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[0][2], static_cast<T>(6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[0][3], static_cast<T>(8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[1][0], static_cast<T>(10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[1][1], static_cast<T>(12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[1][2], static_cast<T>(14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[1][3], static_cast<T>(16.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[2][0], static_cast<T>(18.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[2][1], static_cast<T>(20.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[2][2], static_cast<T>(22.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[2][3], static_cast<T>(24.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[3][0], static_cast<T>(26.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[3][1], static_cast<T>(28.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[3][2], static_cast<T>(30.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[3][3], static_cast<T>(32.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(scalar_mult_eq, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(5.0);
	M[1][1] = static_cast<T>(6.0);
	M[1][2] = static_cast<T>(7.0);
	M[1][3] = static_cast<T>(8.0);
	M[2][0] = static_cast<T>(9.0);
	M[2][1] = static_cast<T>(10.0);
	M[2][2] = static_cast<T>(11.0);
	M[2][3] = static_cast<T>(12.0);
	M[3][0] = static_cast<T>(13.0);
	M[3][1] = static_cast<T>(14.0);
	M[3][2] = static_cast<T>(15.0);
	M[3][3] = static_cast<T>(16.0);
	T s = static_cast<T>(2.0);
	vmath::core::matrix<T, 4> M_mult = M;
	M_mult *= s;
	BOOST_CHECK_CLOSE(M_mult[0][0], static_cast<T>(2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[0][1], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[0][2], static_cast<T>(6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[0][3], static_cast<T>(8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[1][0], static_cast<T>(10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[1][1], static_cast<T>(12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[1][2], static_cast<T>(14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[1][3], static_cast<T>(16.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[2][0], static_cast<T>(18.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[2][1], static_cast<T>(20.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[2][2], static_cast<T>(22.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[2][3], static_cast<T>(24.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[3][0], static_cast<T>(26.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[3][1], static_cast<T>(28.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[3][2], static_cast<T>(30.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_mult[3][3], static_cast<T>(32.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(scalar_div, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(2.0);
	M[0][1] = static_cast<T>(4.0);
	M[0][2] = static_cast<T>(6.0);
	M[0][3] = static_cast<T>(8.0);
	M[1][0] = static_cast<T>(10.0);
	M[1][1] = static_cast<T>(12.0);
	M[1][2] = static_cast<T>(14.0);
	M[1][3] = static_cast<T>(16.0);
	M[2][0] = static_cast<T>(18.0);
	M[2][1] = static_cast<T>(20.0);
	M[2][2] = static_cast<T>(22.0);
	M[2][3] = static_cast<T>(24.0);
	M[3][0] = static_cast<T>(26.0);
	M[3][1] = static_cast<T>(28.0);
	M[3][2] = static_cast<T>(30.0);
	M[3][3] = static_cast<T>(32.0);
	T s = static_cast<T>(2.0);
	vmath::core::matrix<T, 4> M_div;
	M_div = M / s;
	BOOST_CHECK_CLOSE(M_div[0][0], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[0][1], static_cast<T>(2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[0][2], static_cast<T>(3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[0][3], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[1][0], static_cast<T>(5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[1][1], static_cast<T>(6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[1][2], static_cast<T>(7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[1][3], static_cast<T>(8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[2][0], static_cast<T>(9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[2][1], static_cast<T>(10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[2][2], static_cast<T>(11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[2][3], static_cast<T>(12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[3][0], static_cast<T>(13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[3][1], static_cast<T>(14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[3][2], static_cast<T>(15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[3][3], static_cast<T>(16.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(scalar_div_eq, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(2.0);
	M[0][1] = static_cast<T>(4.0);
	M[0][2] = static_cast<T>(6.0);
	M[0][3] = static_cast<T>(8.0);
	M[1][0] = static_cast<T>(10.0);
	M[1][1] = static_cast<T>(12.0);
	M[1][2] = static_cast<T>(14.0);
	M[1][3] = static_cast<T>(16.0);
	M[2][0] = static_cast<T>(18.0);
	M[2][1] = static_cast<T>(20.0);
	M[2][2] = static_cast<T>(22.0);
	M[2][3] = static_cast<T>(24.0);
	M[3][0] = static_cast<T>(26.0);
	M[3][1] = static_cast<T>(28.0);
	M[3][2] = static_cast<T>(30.0);
	M[3][3] = static_cast<T>(32.0);
	T s = static_cast<T>(2.0);
	vmath::core::matrix<T, 4> M_div = M;
	M_div /= s;
	BOOST_CHECK_CLOSE(M_div[0][0], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[0][1], static_cast<T>(2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[0][2], static_cast<T>(3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[0][3], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[1][0], static_cast<T>(5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[1][1], static_cast<T>(6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[1][2], static_cast<T>(7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[1][3], static_cast<T>(8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[2][0], static_cast<T>(9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[2][1], static_cast<T>(10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[2][2], static_cast<T>(11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[2][3], static_cast<T>(12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[3][0], static_cast<T>(13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[3][1], static_cast<T>(14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[3][2], static_cast<T>(15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_div[3][3], static_cast<T>(16.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(transpose, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(5.0);
	M[1][1] = static_cast<T>(6.0);
	M[1][2] = static_cast<T>(7.0);
	M[1][3] = static_cast<T>(8.0);
	M[2][0] = static_cast<T>(9.0);
	M[2][1] = static_cast<T>(10.0);
	M[2][2] = static_cast<T>(11.0);
	M[2][3] = static_cast<T>(12.0);
	M[3][0] = static_cast<T>(13.0);
	M[3][1] = static_cast<T>(14.0);
	M[3][2] = static_cast<T>(15.0);
	M[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4> M_trans;
	M_trans = M.transpose();
	BOOST_CHECK_CLOSE(M_trans[0][0], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[0][1], static_cast<T>(5.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[0][2], static_cast<T>(9.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[0][3], static_cast<T>(13.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[1][0], static_cast<T>(2.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[1][1], static_cast<T>(6.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[1][2], static_cast<T>(10.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[1][3], static_cast<T>(14.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[2][0], static_cast<T>(3.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[2][1], static_cast<T>(7.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[2][2], static_cast<T>(11.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[2][3], static_cast<T>(15.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[3][0], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[3][1], static_cast<T>(8.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[3][2], static_cast<T>(12.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_trans[3][3], static_cast<T>(16.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(minor, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(2.0);
	M[1][1] = static_cast<T>(3.0);
	M[1][2] = static_cast<T>(4.0);
	M[1][3] = static_cast<T>(1.0);
	M[2][0] = static_cast<T>(3.0);
	M[2][1] = static_cast<T>(4.0);
	M[2][2] = static_cast<T>(1.0);
	M[2][3] = static_cast<T>(2.0);
	M[3][0] = static_cast<T>(4.0);
	M[3][1] = static_cast<T>(1.0);
	M[3][2] = static_cast<T>(2.0);
	M[3][3] = static_cast<T>(3.0);
	BOOST_CHECK_CLOSE(M.minor(0, 0), static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(1, 0), static_cast<T>(-4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(2, 0), static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(3, 0), static_cast<T>(-44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(0, 1), static_cast<T>(-4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(1, 1), static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(2, 1), static_cast<T>(-44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(3, 1), static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(0, 2), static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(1, 2), static_cast<T>(-44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(2, 2), static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(3, 2), static_cast<T>(-4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(0, 3), static_cast<T>(-44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(1, 3), static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(2, 3), static_cast<T>(-4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M.minor(3, 3), static_cast<T>(4.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(det, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(5.0);
	M[1][1] = static_cast<T>(6.0);
	M[1][2] = static_cast<T>(7.0);
	M[1][3] = static_cast<T>(8.0);
	M[2][0] = static_cast<T>(9.0);
	M[2][1] = static_cast<T>(10.0);
	M[2][2] = static_cast<T>(11.0);
	M[2][3] = static_cast<T>(12.0);
	M[3][0] = static_cast<T>(13.0);
	M[3][1] = static_cast<T>(14.0);
	M[3][2] = static_cast<T>(15.0);
	M[3][3] = static_cast<T>(16.0);
	BOOST_CHECK_SMALL(M.det(), static_cast<T>(1e-7));
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(2.0);
	M[1][1] = static_cast<T>(3.0);
	M[1][2] = static_cast<T>(4.0);
	M[1][3] = static_cast<T>(1.0);
	M[2][0] = static_cast<T>(3.0);
	M[2][1] = static_cast<T>(4.0);
	M[2][2] = static_cast<T>(1.0);
	M[2][3] = static_cast<T>(2.0);
	M[3][0] = static_cast<T>(4.0);
	M[3][1] = static_cast<T>(1.0);
	M[3][2] = static_cast<T>(2.0);
	M[3][3] = static_cast<T>(3.0);
	BOOST_CHECK_CLOSE(M.det(), static_cast<T>(160.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(minors, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(2.0);
	M[1][1] = static_cast<T>(3.0);
	M[1][2] = static_cast<T>(4.0);
	M[1][3] = static_cast<T>(1.0);
	M[2][0] = static_cast<T>(3.0);
	M[2][1] = static_cast<T>(4.0);
	M[2][2] = static_cast<T>(1.0);
	M[2][3] = static_cast<T>(2.0);
	M[3][0] = static_cast<T>(4.0);
	M[3][1] = static_cast<T>(1.0);
	M[3][2] = static_cast<T>(2.0);
	M[3][3] = static_cast<T>(3.0);
	vmath::core::matrix<T, 4> M_minors;
	M_minors = M.minors();
	BOOST_CHECK_CLOSE(M_minors[0][0], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[0][1], static_cast<T>(-4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[0][2], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[0][3], static_cast<T>(-44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[1][0], static_cast<T>(-4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[1][1], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[1][2], static_cast<T>(-44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[1][3], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[2][0], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[2][1], static_cast<T>(-44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[2][2], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[2][3], static_cast<T>(-4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[3][0], static_cast<T>(-44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[3][1], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[3][2], static_cast<T>(-4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_minors[3][3], static_cast<T>(4.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(cofactor, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(2.0);
	M[1][1] = static_cast<T>(3.0);
	M[1][2] = static_cast<T>(4.0);
	M[1][3] = static_cast<T>(1.0);
	M[2][0] = static_cast<T>(3.0);
	M[2][1] = static_cast<T>(4.0);
	M[2][2] = static_cast<T>(1.0);
	M[2][3] = static_cast<T>(2.0);
	M[3][0] = static_cast<T>(4.0);
	M[3][1] = static_cast<T>(1.0);
	M[3][2] = static_cast<T>(2.0);
	M[3][3] = static_cast<T>(3.0);
	vmath::core::matrix<T, 4> M_cofactor;
	M_cofactor = M.cofactor();
	BOOST_CHECK_CLOSE(M_cofactor[0][0], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[0][1], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[0][2], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[0][3], static_cast<T>(44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[1][0], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[1][1], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[1][2], static_cast<T>(44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[1][3], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[2][0], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[2][1], static_cast<T>(44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[2][2], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[2][3], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[3][0], static_cast<T>(44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[3][1], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[3][2], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_cofactor[3][3], static_cast<T>(4.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(adjugate, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(2.0);
	M[1][1] = static_cast<T>(3.0);
	M[1][2] = static_cast<T>(4.0);
	M[1][3] = static_cast<T>(1.0);
	M[2][0] = static_cast<T>(3.0);
	M[2][1] = static_cast<T>(4.0);
	M[2][2] = static_cast<T>(1.0);
	M[2][3] = static_cast<T>(2.0);
	M[3][0] = static_cast<T>(4.0);
	M[3][1] = static_cast<T>(1.0);
	M[3][2] = static_cast<T>(2.0);
	M[3][3] = static_cast<T>(3.0);
	vmath::core::matrix<T, 4> M_adj = M.adjugate();
	BOOST_CHECK_CLOSE(M_adj[0][0], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[0][1], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[0][2], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[0][3], static_cast<T>(44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[1][0], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[1][1], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[1][2], static_cast<T>(44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[1][3], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[2][0], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[2][1], static_cast<T>(44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[2][2], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[2][3], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[3][0], static_cast<T>(44.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[3][1], static_cast<T>(-36.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[3][2], static_cast<T>(4.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_adj[3][3], static_cast<T>(4.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(inverse, T, float_types) {
	vmath::core::matrix<T, 4> M;
	M[0][0] = static_cast<T>(1.0);
	M[0][1] = static_cast<T>(2.0);
	M[0][2] = static_cast<T>(3.0);
	M[0][3] = static_cast<T>(4.0);
	M[1][0] = static_cast<T>(2.0);
	M[1][1] = static_cast<T>(3.0);
	M[1][2] = static_cast<T>(4.0);
	M[1][3] = static_cast<T>(1.0);
	M[2][0] = static_cast<T>(3.0);
	M[2][1] = static_cast<T>(4.0);
	M[2][2] = static_cast<T>(1.0);
	M[2][3] = static_cast<T>(2.0);
	M[3][0] = static_cast<T>(4.0);
	M[3][1] = static_cast<T>(1.0);
	M[3][2] = static_cast<T>(2.0);
	M[3][3] = static_cast<T>(3.0);
	vmath::core::matrix<T, 4> M_inv = M.inverse();
	BOOST_CHECK_CLOSE(M_inv[0][0], static_cast<T>(-36.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[0][1], static_cast<T>(4.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[0][2], static_cast<T>(4.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[0][3], static_cast<T>(44.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[1][0], static_cast<T>(4.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[1][1], static_cast<T>(4.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[1][2], static_cast<T>(44.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[1][3], static_cast<T>(-36.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[2][0], static_cast<T>(4.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[2][1], static_cast<T>(44.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[2][2], static_cast<T>(-36.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[2][3], static_cast<T>(4.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[3][0], static_cast<T>(44.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[3][1], static_cast<T>(-36.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[3][2], static_cast<T>(4.0 / 160.0), 1e-4f);
	BOOST_CHECK_CLOSE(M_inv[3][3], static_cast<T>(4.0 / 160.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(equals, T, float_types) {
	vmath::core::matrix<T, 4> M1;
	M1[0][0] = static_cast<T>(1.0);
	M1[0][1] = static_cast<T>(2.0);
	M1[0][2] = static_cast<T>(3.0);
	M1[0][3] = static_cast<T>(4.0);
	M1[1][0] = static_cast<T>(5.0);
	M1[1][1] = static_cast<T>(6.0);
	M1[1][2] = static_cast<T>(7.0);
	M1[1][3] = static_cast<T>(8.0);
	M1[2][0] = static_cast<T>(9.0);
	M1[2][1] = static_cast<T>(10.0);
	M1[2][2] = static_cast<T>(11.0);
	M1[2][3] = static_cast<T>(12.0);
	M1[3][0] = static_cast<T>(13.0);
	M1[3][1] = static_cast<T>(14.0);
	M1[3][2] = static_cast<T>(15.0);
	M1[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4> M2;
	M2[0][0] = static_cast<T>(1.0);
	M2[0][1] = static_cast<T>(2.0);
	M2[0][2] = static_cast<T>(3.0);
	M2[0][3] = static_cast<T>(4.0);
	M2[1][0] = static_cast<T>(5.0);
	M2[1][1] = static_cast<T>(6.0);
	M2[1][2] = static_cast<T>(7.0);
	M2[1][3] = static_cast<T>(8.0);
	M2[2][0] = static_cast<T>(9.0);
	M2[2][1] = static_cast<T>(10.0);
	M2[2][2] = static_cast<T>(11.0);
	M2[2][3] = static_cast<T>(12.0);
	M2[3][0] = static_cast<T>(13.0);
	M2[3][1] = static_cast<T>(14.0);
	M2[3][2] = static_cast<T>(15.0);
	M2[3][3] = static_cast<T>(16.0);
	vmath::core::matrix<T, 4> M3;
	M3[0][0] = static_cast<T>(16.0);
	M3[0][1] = static_cast<T>(15.0);
	M3[0][2] = static_cast<T>(14.0);
	M3[0][3] = static_cast<T>(13.0);
	M3[1][0] = static_cast<T>(12.0);
	M3[1][1] = static_cast<T>(11.0);
	M3[1][2] = static_cast<T>(10.0);
	M3[1][3] = static_cast<T>(9.0);
	M3[2][0] = static_cast<T>(8.0);
	M3[2][1] = static_cast<T>(7.0);
	M3[2][2] = static_cast<T>(6.0);
	M3[2][3] = static_cast<T>(5.0);
	M3[3][0] = static_cast<T>(4.0);
	M3[3][1] = static_cast<T>(3.0);
	M3[3][2] = static_cast<T>(2.0);
	M3[3][3] = static_cast<T>(1.0);
	BOOST_CHECK(M1 == M2);
	BOOST_CHECK(M1 != M3);
	BOOST_CHECK(M2 != M3);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(translation, T, float_types) {
	vmath::core::vector<T, 3> V(static_cast<T>(1.0), static_cast<T>(2.0), static_cast<T>(3.0));
	vmath::core::matrix<T, 4> M(vmath::core::matrix<T, 4>::translation(V));
	BOOST_CHECK_CLOSE(M[0][0], static_cast<T>(1.0f), 1e-4f);
	BOOST_CHECK_SMALL(M[0][1], static_cast<T>(1e-7f));
	BOOST_CHECK_SMALL(M[0][2], static_cast<T>(1e-7f));
	BOOST_CHECK_SMALL(M[0][3], static_cast<T>(1e-7f));
	BOOST_CHECK_SMALL(M[1][0], static_cast<T>(1e-7f));
	BOOST_CHECK_CLOSE(M[1][1], static_cast<T>(1.0f), 1e-4f);
	BOOST_CHECK_SMALL(M[1][2], static_cast<T>(1e-7f));
	BOOST_CHECK_SMALL(M[1][3], static_cast<T>(1e-7f));
	BOOST_CHECK_SMALL(M[2][0], static_cast<T>(1e-7f));
	BOOST_CHECK_SMALL(M[2][1], static_cast<T>(1e-7f));
	BOOST_CHECK_CLOSE(M[2][2], static_cast<T>(1.0f), 1e-4f);
	BOOST_CHECK_SMALL(M[2][3], static_cast<T>(1e-7f));
	BOOST_CHECK_CLOSE(M[3][0], V.x, 1e-4f);
	BOOST_CHECK_CLOSE(M[3][1], V.y, 1e-4f);
	BOOST_CHECK_CLOSE(M[3][2], V.z, 1e-4f);
	BOOST_CHECK_CLOSE(M[3][3], static_cast<T>(1.0f), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(rotation, T, float_types) {
	vmath::core::vector<T, 3> out(static_cast<T>(1.0), static_cast<T>(0.0), static_cast<T>(0.0));
	vmath::core::vector<T, 3> up(static_cast<T>(0.0), static_cast<T>(1.0), static_cast<T>(0.0));
	vmath::core::matrix<T, 4> M(vmath::core::matrix<T, 4>::rotation(out, up));
	BOOST_CHECK_SMALL(M[0][0], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[0][1], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[0][2], static_cast<T>(1.0), 1e-4f);
	BOOST_CHECK_SMALL(M[0][3], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[1][0], up.x, 1e-4f);
	BOOST_CHECK_CLOSE(M[1][1], up.y, 1e-4f);
	BOOST_CHECK_CLOSE(M[1][2], up.z, 1e-4f);
	BOOST_CHECK_SMALL(M[1][3], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[2][0], -out.x, 1e-4f);
	BOOST_CHECK_CLOSE(M[2][1], -out.y, 1e-4f);
	BOOST_CHECK_CLOSE(M[2][2], -out.z, 1e-4f);
	BOOST_CHECK_SMALL(M[2][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[3][0], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[3][1], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[3][2], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[3][3], static_cast<T>(1.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(scale, T, float_types) {
	T x_scale = static_cast<T>(2.0);
	T y_scale = static_cast<T>(3.0);
	T z_scale = static_cast<T>(4.0);
	vmath::core::matrix<T, 4> M(vmath::core::matrix<T, 4>::scale(x_scale, y_scale, z_scale));
	BOOST_CHECK_CLOSE(M[0][0], x_scale, 1e-4f);
	BOOST_CHECK_SMALL(M[0][1], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[0][2], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[0][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[1][0], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[1][1], y_scale, 1e-4f);
	BOOST_CHECK_SMALL(M[1][2], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[1][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[2][0], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[2][1], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[2][2], z_scale, 1e-4f);
	BOOST_CHECK_SMALL(M[2][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[3][0], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[3][1], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[3][2], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[3][3], static_cast<T>(1.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(orthographic, T, float_types) {
	vmath::core::matrix<T, 4> M(vmath::core::matrix<T, 4>::orthographic(
		static_cast<T>(0.0), static_cast<T>(1920.0), static_cast<T>(0.0),
		static_cast<T>(1080.0), static_cast<T>(0.1), static_cast<T>(1000.0)));
	BOOST_CHECK_CLOSE(M[0][0], static_cast<T>(0.001041666667), 1e-4f);
	BOOST_CHECK_SMALL(M[0][1], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[0][2], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[0][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[1][0], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[1][1], static_cast<T>(0.001851851852), 1e-4f);
	BOOST_CHECK_SMALL(M[1][2], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[1][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[2][0], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[2][1], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[2][2], static_cast<T>(-0.002000200020), 1e-4f);
	BOOST_CHECK_SMALL(M[2][3], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[3][0], static_cast<T>(-1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[3][1], static_cast<T>(-1.0), 1e-4f);
	BOOST_CHECK_CLOSE(M[3][2], static_cast<T>(-1.000200020002), 1e-4f);
	BOOST_CHECK_CLOSE(M[3][3], static_cast<T>(1.0), 1e-4f);
}

BOOST_AUTO_TEST_CASE_TEMPLATE(perspective, T, float_types) {
	vmath::core::matrix<T, 4> M(vmath::core::matrix<T, 4>::perspective(
		static_cast<T>(1.0471975511965976), static_cast<T>(1.77777777777777777777),
		static_cast<T>(0.1), static_cast<T>(1000.0)));
	BOOST_CHECK_CLOSE(M[0][0], static_cast<T>(0.9742785792574936), 1e-4f);
	BOOST_CHECK_SMALL(M[0][1], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[0][2], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[0][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[1][0], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[1][1], static_cast<T>(1.7320508075688774), 1e-4f);
	BOOST_CHECK_SMALL(M[1][2], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[1][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[2][0], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[2][1], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[2][2], static_cast<T>(-1.0002000200020003), 1e-4f);
	BOOST_CHECK_SMALL(M[2][3], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[3][0], static_cast<T>(1e-7));
	BOOST_CHECK_SMALL(M[3][1], static_cast<T>(1e-7));
	BOOST_CHECK_CLOSE(M[3][2], static_cast<T>(-0.20002000200020004), 1e-4f);
	BOOST_CHECK_SMALL(M[3][3], static_cast<T>(1e-7));
}

BOOST_AUTO_TEST_SUITE_END()
